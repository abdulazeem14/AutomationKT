<?xml version="1.0" encoding="UTF-8"?>
<testng-results total="18" passed="16" failed="2" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2021-07-16T07:35:00Z" name="Default suite" finished-at="2021-07-16T07:38:25Z" duration-ms="205456">
    <groups>
    </groups>
    <test started-at="2021-07-16T07:35:00Z" name="Default test" finished-at="2021-07-16T07:38:25Z" duration-ms="205456">
      <class name="store_Testcase.Login">
        <test-method is-config="true" signature="Bsuite()[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:04:59Z" name="Bsuite" finished-at="2021-07-16T13:05:00Z" duration-ms="223" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Bsuite -->
        <test-method signature="loginCheckChrome(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:05:00Z" name="loginCheckChrome" data-provider="validtestdata" finished-at="2021-07-16T13:05:11Z" duration-ms="10666" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Function=, UserName=ducati@gmail.com, Test Id=Store-402, AlertMessage=, Password=ducati14}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginCheckChrome -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:05:11Z" name="getResult" finished-at="2021-07-16T13:05:11Z" duration-ms="16" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginCheckChrome status=SUCCESS method=Login.loginCheckChrome(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="loginCheckChrome(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:05:11Z" name="loginCheckChrome" data-provider="validtestdata" finished-at="2021-07-16T13:05:20Z" duration-ms="8966" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Function=, UserName=invaliduser, Test Id=Store-403, AlertMessage=User does not exist., Password=pannigale}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginCheckChrome -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:05:20Z" name="getResult" finished-at="2021-07-16T13:05:20Z" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginCheckChrome status=SUCCESS method=Login.loginCheckChrome(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="loginCheckChrome(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:05:20Z" name="loginCheckChrome" data-provider="validtestdata" finished-at="2021-07-16T13:05:29Z" duration-ms="9252" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Function=, UserName=ducati@gmail.com, Test Id=Store-404, AlertMessage=Wrong password., Password=Volkswagen}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginCheckChrome -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:05:29Z" name="getResult" finished-at="2021-07-16T13:05:29Z" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginCheckChrome status=SUCCESS method=Login.loginCheckChrome(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="loginCheckChrome(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:05:29Z" name="loginCheckChrome" data-provider="validtestdata" finished-at="2021-07-16T13:05:36Z" duration-ms="6582" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Function=, UserName=DUcati@gmail.com, Test Id=Store-405, AlertMessage=User does not exist., Password=Ducati14}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginCheckChrome -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:05:36Z" name="getResult" finished-at="2021-07-16T13:05:36Z" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginCheckChrome status=SUCCESS method=Login.loginCheckChrome(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="loginCheckChrome(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:05:36Z" name="loginCheckChrome" data-provider="validtestdata" finished-at="2021-07-16T13:05:48Z" duration-ms="11899" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Function=, UserName=, Test Id=Store-406, AlertMessage=Please fill out Username and Password., Password=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginCheckChrome -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:05:48Z" name="getResult" finished-at="2021-07-16T13:05:48Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginCheckChrome status=SUCCESS method=Login.loginCheckChrome(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="loginCheckChrome(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:05:48Z" name="loginCheckChrome" data-provider="validtestdata" finished-at="2021-07-16T13:05:55Z" duration-ms="7353" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Function=logout, UserName=ducati@gmail.com, Test Id=Store-407, AlertMessage=, Password=ducati14}]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.UnhandledAlertException">
            <message>
              <![CDATA[unexpected alert open: {Alert text : Please fill out Username and Password.}
  (Session info: chrome=91.0.4472.124): Please fill out Username and Password.
Build info: version: '3.14.0', revision: 'aacccce0', time: '2018-08-02T20:19:58.91Z'
System info: host: 'QT-INBG-LT0897', ip: '192.168.29.38', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '15.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.124, chrome: {chromedriverVersion: 91.0.4472.101 (af52a90bf870..., userDataDir: C:\Users\AZEEM~1.HAM\AppDat...}, goog:chromeOptions: {debuggerAddress: localhost:60426}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: 41ac9b7b458cfde711d067e1c56e86ac
*** Element info: {Using=xpath, value=//*[@id='logout2']}]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.UnhandledAlertException: unexpected alert open: {Alert text : Please fill out Username and Password.}
  (Session info: chrome=91.0.4472.124): Please fill out Username and Password.
Build info: version: '3.14.0', revision: 'aacccce0', time: '2018-08-02T20:19:58.91Z'
System info: host: 'QT-INBG-LT0897', ip: '192.168.29.38', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '15.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.124, chrome: {chromedriverVersion: 91.0.4472.101 (af52a90bf870..., userDataDir: C:\Users\AZEEM~1.HAM\AppDat...}, goog:chromeOptions: {debuggerAddress: localhost:60426}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: 41ac9b7b458cfde711d067e1c56e86ac
*** Element info: {Using=xpath, value=//*[@id='logout2']}
	at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:120)
	at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
	at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
	at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
	at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:548)
	at org.openqa.selenium.remote.RemoteWebDriver.findElements(RemoteWebDriver.java:349)
	at org.openqa.selenium.remote.RemoteWebDriver.findElementsByXPath(RemoteWebDriver.java:428)
	at org.openqa.selenium.By$ByXPath.findElements(By.java:348)
	at org.openqa.selenium.remote.RemoteWebDriver.findElements(RemoteWebDriver.java:310)
	at org.openqa.selenium.support.ui.ExpectedConditions.findElement(ExpectedConditions.java:895)
	at org.openqa.selenium.support.ui.ExpectedConditions.access$000(ExpectedConditions.java:44)
	at org.openqa.selenium.support.ui.ExpectedConditions$7.apply(ExpectedConditions.java:206)
	at org.openqa.selenium.support.ui.ExpectedConditions$7.apply(ExpectedConditions.java:202)
	at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:260)
	at pageObjects.POManager.performExplictwait(POManager.java:74)
	at store_Testcase.Login.loginCheckChrome(Login.java:107)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.UnhandledAlertException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginCheckChrome -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:05:55Z" name="getResult" finished-at="2021-07-16T13:05:55Z" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginCheckChrome status=FAILURE method=Login.loginCheckChrome(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="loginCheckChrome(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:05:55Z" name="loginCheckChrome" data-provider="validtestdata" finished-at="2021-07-16T13:06:04Z" duration-ms="8705" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Function=session, UserName=ducati@gmail.com, Test Id=Store-408, AlertMessage=, Password=ducati14}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginCheckChrome -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:06:04Z" name="getResult" finished-at="2021-07-16T13:06:04Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginCheckChrome status=SUCCESS method=Login.loginCheckChrome(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="loginCheckChrome(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:06:04Z" name="loginCheckChrome" data-provider="validtestdata" finished-at="2021-07-16T13:06:12Z" duration-ms="7740" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Function=closeButton, UserName=, Test Id=Store-409, AlertMessage=, Password=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginCheckChrome -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:06:12Z" name="getResult" finished-at="2021-07-16T13:06:12Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginCheckChrome status=SUCCESS method=Login.loginCheckChrome(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="loginCheckChrome(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:06:12Z" name="loginCheckChrome" data-provider="validtestdata" finished-at="2021-07-16T13:06:18Z" duration-ms="6448" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Function=xclose, UserName=, Test Id=Store-410, AlertMessage=, Password=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginCheckChrome -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:06:18Z" name="getResult" finished-at="2021-07-16T13:06:18Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginCheckChrome status=SUCCESS method=Login.loginCheckChrome(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="loginCheckEdge(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:06:18Z" name="loginCheckEdge" data-provider="validtestdata" finished-at="2021-07-16T13:06:34Z" duration-ms="15991" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Function=, UserName=ducati@gmail.com, Test Id=Store-402, AlertMessage=, Password=ducati14}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginCheckEdge -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:06:34Z" name="getResult" finished-at="2021-07-16T13:06:34Z" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginCheckEdge status=SUCCESS method=Login.loginCheckEdge(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="loginCheckEdge(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:06:34Z" name="loginCheckEdge" data-provider="validtestdata" finished-at="2021-07-16T13:06:47Z" duration-ms="12827" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Function=, UserName=invaliduser, Test Id=Store-403, AlertMessage=User does not exist., Password=pannigale}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginCheckEdge -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:06:47Z" name="getResult" finished-at="2021-07-16T13:06:47Z" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginCheckEdge status=SUCCESS method=Login.loginCheckEdge(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="loginCheckEdge(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:06:47Z" name="loginCheckEdge" data-provider="validtestdata" finished-at="2021-07-16T13:07:01Z" duration-ms="13925" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Function=, UserName=ducati@gmail.com, Test Id=Store-404, AlertMessage=Wrong password., Password=Volkswagen}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginCheckEdge -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:07:01Z" name="getResult" finished-at="2021-07-16T13:07:01Z" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginCheckEdge status=SUCCESS method=Login.loginCheckEdge(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="loginCheckEdge(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:07:01Z" name="loginCheckEdge" data-provider="validtestdata" finished-at="2021-07-16T13:07:24Z" duration-ms="23180" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Function=, UserName=DUcati@gmail.com, Test Id=Store-405, AlertMessage=User does not exist., Password=Ducati14}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginCheckEdge -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:07:24Z" name="getResult" finished-at="2021-07-16T13:07:24Z" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginCheckEdge status=SUCCESS method=Login.loginCheckEdge(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="loginCheckEdge(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:07:24Z" name="loginCheckEdge" data-provider="validtestdata" finished-at="2021-07-16T13:07:48Z" duration-ms="23531" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Function=, UserName=, Test Id=Store-406, AlertMessage=Please fill out Username and Password., Password=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginCheckEdge -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:07:48Z" name="getResult" finished-at="2021-07-16T13:07:48Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginCheckEdge status=SUCCESS method=Login.loginCheckEdge(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="loginCheckEdge(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:07:48Z" name="loginCheckEdge" data-provider="validtestdata" finished-at="2021-07-16T13:07:59Z" duration-ms="11626" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Function=logout, UserName=ducati@gmail.com, Test Id=Store-407, AlertMessage=, Password=ducati14}]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.UnhandledAlertException">
            <message>
              <![CDATA[unexpected alert open: {Alert text : Please fill out Username and Password.}
  (Session info: MicrosoftEdge=91.0.864.67): Please fill out Username and Password.
Build info: version: '3.14.0', revision: 'aacccce0', time: '2018-08-02T20:19:58.91Z'
System info: host: 'QT-INBG-LT0897', ip: '192.168.29.38', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '15.0.2'
Driver info: org.openqa.selenium.edge.EdgeDriver
Capabilities {acceptInsecureCerts: false, browserName: msedge, browserVersion: 91.0.864.67, javascriptEnabled: true, ms:edgeOptions: {debuggerAddress: localhost:54219}, msedge: {msedgedriverVersion: 91.0.864.70 (8c35a0dac4b4b8..., userDataDir: C:\Users\AZEEM~1.HAM\AppDat...}, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: 62bf4f23c5fa1adb347e0c787d66a702
*** Element info: {Using=xpath, value=//*[@id='logout2']}]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.UnhandledAlertException: unexpected alert open: {Alert text : Please fill out Username and Password.}
  (Session info: MicrosoftEdge=91.0.864.67): Please fill out Username and Password.
Build info: version: '3.14.0', revision: 'aacccce0', time: '2018-08-02T20:19:58.91Z'
System info: host: 'QT-INBG-LT0897', ip: '192.168.29.38', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '15.0.2'
Driver info: org.openqa.selenium.edge.EdgeDriver
Capabilities {acceptInsecureCerts: false, browserName: msedge, browserVersion: 91.0.864.67, javascriptEnabled: true, ms:edgeOptions: {debuggerAddress: localhost:54219}, msedge: {msedgedriverVersion: 91.0.864.70 (8c35a0dac4b4b8..., userDataDir: C:\Users\AZEEM~1.HAM\AppDat...}, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: 62bf4f23c5fa1adb347e0c787d66a702
*** Element info: {Using=xpath, value=//*[@id='logout2']}
	at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:120)
	at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
	at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
	at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
	at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:548)
	at org.openqa.selenium.remote.RemoteWebDriver.findElements(RemoteWebDriver.java:349)
	at org.openqa.selenium.remote.RemoteWebDriver.findElementsByXPath(RemoteWebDriver.java:428)
	at org.openqa.selenium.By$ByXPath.findElements(By.java:348)
	at org.openqa.selenium.remote.RemoteWebDriver.findElements(RemoteWebDriver.java:310)
	at org.openqa.selenium.support.ui.ExpectedConditions.findElement(ExpectedConditions.java:895)
	at org.openqa.selenium.support.ui.ExpectedConditions.access$000(ExpectedConditions.java:44)
	at org.openqa.selenium.support.ui.ExpectedConditions$7.apply(ExpectedConditions.java:206)
	at org.openqa.selenium.support.ui.ExpectedConditions$7.apply(ExpectedConditions.java:202)
	at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:260)
	at pageObjects.POManager.performExplictwait(POManager.java:74)
	at store_Testcase.Login.loginCheckEdge(Login.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.UnhandledAlertException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginCheckEdge -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:07:59Z" name="getResult" finished-at="2021-07-16T13:07:59Z" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginCheckEdge status=FAILURE method=Login.loginCheckEdge(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="loginCheckEdge(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:07:59Z" name="loginCheckEdge" data-provider="validtestdata" finished-at="2021-07-16T13:08:07Z" duration-ms="7503" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Function=session, UserName=ducati@gmail.com, Test Id=Store-408, AlertMessage=, Password=ducati14}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginCheckEdge -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:08:07Z" name="getResult" finished-at="2021-07-16T13:08:07Z" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginCheckEdge status=SUCCESS method=Login.loginCheckEdge(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="loginCheckEdge(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:08:07Z" name="loginCheckEdge" data-provider="validtestdata" finished-at="2021-07-16T13:08:13Z" duration-ms="6150" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Function=closeButton, UserName=, Test Id=Store-409, AlertMessage=, Password=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginCheckEdge -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:08:13Z" name="getResult" finished-at="2021-07-16T13:08:13Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginCheckEdge status=SUCCESS method=Login.loginCheckEdge(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="loginCheckEdge(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:08:13Z" name="loginCheckEdge" data-provider="validtestdata" finished-at="2021-07-16T13:08:24Z" duration-ms="11456" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Function=xclose, UserName=, Test Id=Store-410, AlertMessage=, Password=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginCheckEdge -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:08:24Z" name="getResult" finished-at="2021-07-16T13:08:24Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginCheckEdge status=SUCCESS method=Login.loginCheckEdge(java.util.HashMap)[pri:0, instance:store_Testcase.Login@4eaf3684] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="closebrowser()[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:08:24Z" name="closebrowser" finished-at="2021-07-16T13:08:25Z" duration-ms="796" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- closebrowser -->
        <test-method is-config="true" signature="aft()[pri:0, instance:store_Testcase.Login@4eaf3684]" started-at="2021-07-16T13:08:25Z" name="aft" finished-at="2021-07-16T13:08:26Z" duration-ms="530" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aft -->
      </class> <!-- store_Testcase.Login -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
